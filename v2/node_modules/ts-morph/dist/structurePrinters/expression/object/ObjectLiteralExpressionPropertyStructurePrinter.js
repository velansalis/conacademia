"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const structures_1 = require("../../../structures");
const formatting_1 = require("../../formatting");
const Printer_1 = require("../../Printer");
class ObjectLiteralExpressionPropertyStructurePrinter extends Printer_1.Printer {
    constructor(factory) {
        super();
        this.factory = factory;
        this.multipleWriter = new formatting_1.CommaNewLineSeparatedStructuresPrinter(this);
        this.options = { isAmbient: false }; // always false for object literal expressions
    }
    printTexts(writer, members) {
        this.multipleWriter.printText(writer, members);
    }
    printText(writer, member) {
        if (typeof member === "string" || member instanceof Function || member == null) {
            this.printTextOrWriterFunc(writer, member);
            return;
        }
        switch (member.kind) {
            case structures_1.StructureKind.PropertyAssignment:
                this.factory.forPropertyAssignment().printText(writer, member);
                break;
            case structures_1.StructureKind.ShorthandPropertyAssignment:
                this.factory.forShorthandPropertyAssignment().printText(writer, member);
                break;
            case structures_1.StructureKind.SpreadAssignment:
                this.factory.forSpreadAssignment().printText(writer, member);
                break;
            case structures_1.StructureKind.Method:
                this.factory.forMethodDeclaration(this.options).printText(writer, member);
                break;
            case structures_1.StructureKind.GetAccessor:
                this.factory.forGetAccessorDeclaration(this.options).printText(writer, member);
                break;
            case structures_1.StructureKind.SetAccessor:
                this.factory.forSetAccessorDeclaration(this.options).printText(writer, member);
                break;
            default:
                errors.throwNotImplementedForNeverValueError(member);
        }
    }
}
exports.ObjectLiteralExpressionPropertyStructurePrinter = ObjectLiteralExpressionPropertyStructurePrinter;
