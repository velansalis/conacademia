"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../errors");
const structures_1 = require("../../structures");
const helpers_1 = require("../helpers");
const Printer_1 = require("../Printer");
class TypeElementMemberStructurePrinter extends Printer_1.Printer {
    constructor(factory) {
        super();
        this.factory = factory;
    }
    printTexts(writer, members) {
        if (members == null)
            return;
        if (typeof members === "string" || members instanceof Function)
            this.printText(writer, members);
        else {
            for (const member of members) {
                if (helpers_1.isLastNonWhitespaceCharCloseBrace(writer))
                    writer.blankLineIfLastNot();
                else if (!writer.isAtStartOfFirstLineOfBlock())
                    writer.newLineIfLastNot();
                this.printText(writer, member);
            }
        }
    }
    printText(writer, members) {
        if (typeof members === "string" || members instanceof Function || members == null) {
            this.printTextOrWriterFunc(writer, members);
            return;
        }
        switch (members.kind) {
            case structures_1.StructureKind.PropertySignature:
                this.factory.forPropertySignature().printText(writer, members);
                break;
            case structures_1.StructureKind.MethodSignature:
                this.factory.forMethodSignature().printText(writer, members);
                break;
            case structures_1.StructureKind.CallSignature:
                this.factory.forCallSignatureDeclaration().printText(writer, members);
                break;
            case structures_1.StructureKind.IndexSignature:
                this.factory.forIndexSignatureDeclaration().printText(writer, members);
                break;
            case structures_1.StructureKind.ConstructSignature:
                this.factory.forConstructSignatureDeclaration().printText(writer, members);
                break;
            default:
                errors.throwNotImplementedForNeverValueError(members);
        }
    }
}
exports.TypeElementMemberStructurePrinter = TypeElementMemberStructurePrinter;
